<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>박영기 BLOG</title>
 <link href="http://ygpark.github.com/atom.xml" rel="self"/>
 <link href="http://ygpark.github.com"/>
 <updated>2012-09-19T12:55:09+09:00</updated>
 <id>http://ygpark.github.com</id>
 <author>
   <name>Young-Gi Park</name>
   <email>ghostyak@gmail.com</email>
 </author>

 
 <entry>
   <title>파일이름을 간편하게 바꾸자. Bash 스크립트 활용</title>
   <link href="http://ygpark.github.com/Linux/2012/09/17/rename-linux-in-directory"/>
   <updated>2012-09-17T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux/2012/09/17/rename-linux-in-directory</id>
   <content type="html">&lt;p&gt;리눅스 쉘에서 파일의 확장자를 바꿔야 할 일이 간혹 있습니다. 저는 md파일을 html파일로 바꿔야 하는데 어떻게 하는지 알아볼까요?&lt;/p&gt;

&lt;p&gt;손으로 일일이 타이핑 하기에는 너무 파일이 너무 많고 시간이 오래 걸린다면, 이렇게 Bash 스트립트를 사용해서 시간을 줄여보세요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in `ls *.md` ; do echo &amp;quot;mv $i ${i%.*}.html&amp;quot; ; done&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;업무에 지친 심신이 조금이나마 회복되셨나요?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ HP 1000
+ HP 1000
+ HP 1000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;혹시나 몰라서 echo로 명령어를 출력하기만 했어요. 확인해보고 이상 없으면 echo랑 따옴표를 빼고 실행하면 되어요. 어때요? 참 쉽죠잉~~&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>alsa-util cross compile</title>
   <link href="http://ygpark.github.com/Porting/2012/09/14/alsa-util-cross-compile"/>
   <updated>2012-09-14T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Porting/2012/09/14/alsa-util-cross-compile</id>
   <content type="html">&lt;p&gt;ALSA util cross-compile 하는 방법입니다.&lt;/p&gt;

&lt;h2 id='_'&gt;컴파일 하는법&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ CC=arm-linux-gcc ./configure --target=arm-linux --host=i686-linux --with-curses=ncurses
$ make&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='_'&gt;에러 메시지&lt;/h2&gt;

&lt;p&gt;에러상황을 기록하고자 남깁니다. 저의 경우에는 curses 라이브러리를 찾지 못해서 configure 에러가 났었습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CC=arm-linux-gcc ./configure --target=arm-linux --host=i686-linux
configure: WARNING: if you wanted to set the --build type, don&amp;#39;t use --host.
    If a cross compiler is detected then cross compile mode will be used
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for i686-linux-strip... no
checking for strip... strip
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes
checking whether NLS is requested... yes
.....중략.....
checking for stdint.h... yes
checking for unistd.h... yes
checking panel.h usability... no
checking panel.h presence... yes
configure: WARNING: panel.h: present but cannot be compiled
configure: WARNING: panel.h:     check for missing prerequisite headers?
configure: WARNING: panel.h: see the Autoconf documentation
configure: WARNING: panel.h:     section &amp;quot;Present But Cannot Be Compiled&amp;quot;
configure: WARNING: panel.h: proceeding with the compiler&amp;#39;s result
checking for panel.h... no
configure: error: required curses helper header not found&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>윈도우8에 ADB/fastboot 드라이버 설치하기</title>
   <link href="http://ygpark.github.com/Android/2012/09/07/install-adbfastboot-driver-on-windows-8"/>
   <updated>2012-09-07T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Android/2012/09/07/install-adbfastboot-driver-on-windows-8</id>
   <content type="html">&lt;p&gt;&lt;img alt='안드로이드 이미지' src='/images/blog/android.png' /&gt; &lt;img alt='plus 이미지' style='margin:60px 20px' src='/images/blog/plus.png' width='50px' /&gt; &lt;img alt='윈도우8 이미지' src='/images/blog/windows8.png' /&gt;&lt;/p&gt;

&lt;p&gt;안드로이드 개발하려면 윈도우에 adb/fastboot 드라이버가 설치되어 있어야 합니다. 그런데 윈도우8에는 드라이버가 설치되지 않고 장치관리자에 느낌표가 붙은 &lt;code&gt;Android 1.0&lt;/code&gt;로 보입니다. 이 경우 다음 순서대로 진행하면 드라이버를 설치할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ADB driver를 설치합니다. &lt;br /&gt; &lt;a href='http://ygpark-data.tistory.com/1'&gt;여기서&lt;/a&gt; 다운로드 받으세요.&lt;br /&gt; 이 파일은 압축파일입니다. 압축을 풀고, 안에 들어있는 inf파일들을 설치합니다.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;USB Driver를 설치합니다. &lt;br /&gt; &lt;a href='http://ygpark-data.tistory.com/2'&gt;여기서&lt;/a&gt; 다운로드 받으세요.&lt;br /&gt; 이 파일은 설치파일입니다. 압축을 풀고 USBDrv.exe파일을 실행시켜 드라이버를 설치합니다.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;모든 설치가 완료되었습니다. &lt;br /&gt; 이제 장치관리자에서 &lt;code&gt;Android 1.0&lt;/code&gt;이 사라진 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id='id1525'&gt;참조&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://forum.xda-developers.com/showthread.php?t=1583801'&gt;http://forum.xda-developers.com/showthread.php?t=1583801&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>lxr 설치하기 (Ubuntu 10.04)</title>
   <link href="http://ygpark.github.com/Linux Kernel Tip/2012/08/30/lxr-install-on-ubuntu"/>
   <updated>2012-08-30T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux Kernel Tip/2012/08/30/lxr-install-on-ubuntu</id>
   <content type="html">&lt;p&gt;http://lxr.sourceforge.net/에서 내려받을 수 있는 리눅스 교차 참조기인 lxr은 웹 브라우저로 커널 트리를 탐색하도록 커널 심볼 정의와 사용처를 하이퍼링크로 연결한다.&lt;/p&gt;

&lt;h1 id='id1523'&gt;요구사항&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Apache – Web server&lt;/li&gt;

&lt;li&gt;lxr -Linux Cross Reference&lt;/li&gt;

&lt;li&gt;Perl – Reference generator&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='id1524'&gt;설치&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install lxr perl apache2&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id='apache_'&gt;Apache 설정&lt;/h1&gt;

&lt;p&gt;apache의 설정파일 &lt;code&gt;etc/apache2/sites-enabled/000-default&lt;/code&gt;을 수정하여 &lt;code&gt;/usr/share/lxr&lt;/code&gt; 디렉토리를 웹으로 접근할 수 있도록 설정한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi etc/apache2/sites-enabled/000-default

# Linux Cross Reference Stuff
Alias /lxr &amp;quot;/usr/share/lxr/&amp;quot;
&amp;lt;Directory &amp;quot;usr/share/lxr&amp;quot;&amp;gt;
        Options All
        AllowOverride All
&amp;lt;/Directory&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그리고나서 서버를 재시작한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/apache2 restart&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id='lxr_'&gt;lxr 설정&lt;/h1&gt;

&lt;p&gt;lxr의 설정 파일은 &lt;code&gt;/usr/share/lxr/http/lxr.conf&lt;/code&gt;이다. &lt;code&gt;variable: a&lt;/code&gt;, &lt;code&gt;dbdir&lt;/code&gt;, &lt;code&gt;glimpsebin&lt;/code&gt; 을 수정해야한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 여기에 arm을 추가했다.
variable: a, Architecture, (arm, i386, alpha, m68k, mips, ppc, sparc, sparc64)

# lxr은 이 경로에서 xref, fileidx 파일을 찾는다. 
# 만약 db를 못찾으면 경로를 수정해야한다.
# 주의: 경로의 끝에는 &amp;#39;/&amp;#39;가 없어야한다.
dbdir: /usr/share/lxr/source/$v

# 쉘에서 &amp;#39;which glimpse&amp;#39; 명령으로 경로를 찾은다음 넣어준다.
glimpsebin: /usr/local/bin/glimpse&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래는 수정한 &lt;code&gt;/usr/share/lxr/http/lxr.conf&lt;/code&gt;의 최종본이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Configuration file.

# Define typed variable &amp;quot;v&amp;quot;, read valueset from file.
variable: v, Version, [/usr/share/lxr/source/versions], [/usr/share/lxr/source/defversion]

# Define typed variable &amp;quot;a&amp;quot;.  First value is default.
variable: a, Architecture, (arm, i386, alpha, m68k, mips, ppc, sparc, sparc64)

# Define the base url for the LXR files.
baseurl: http://192.168.0.38/lxr/http/

# These are the templates for the HTML heading, directory listing and
# footer, respectively.
htmlhead: /usr/share/lxr/http/template-head
htmltail: /usr/share/lxr/http/template-tail
htmldir:  /usr/share/lxr/http/template-dir

# The source is here.
sourceroot: /usr/share/lxr/source/$v/linux/
srcrootname: Linux

# &amp;quot;#include &amp;lt;foo.h&amp;gt;&amp;quot; is mapped to this directory (in the LXR source
# tree)
incprefix: /include

# The database files go here.
dbdir: /usr/share/lxr/source/$v

# Glimpse can be found here.
glimpsebin: /usr/local/bin/glimpse

# The power of regexps.  This is pretty Linux-specific, but quite
# useful.  Tinker with it and see what it does.  (How&amp;#39;s that for
# documentation?)
map: /include/asm[^\/]*/ /include/asm-$a/
map: /arch/[^\/]+/ /arch/$a/&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id='__'&gt;교차 참조 만들기&lt;/h1&gt;

&lt;p&gt;i) 만약 &lt;code&gt;/usr/share/lxr/source&lt;/code&gt; 디렉토리가 없으면 만든다.&lt;/p&gt;

&lt;p&gt;ii) &lt;code&gt;2.6.32&lt;/code&gt; 디렉토리를 그 안에 만든다. - 2.6.32는 교차 참조할 리눅스 소스코드의 버전이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /usr/share/lxr/source/2.6.32 -p&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iii) 리눅스 &lt;a href='http://www.kernel.org'&gt;커널소스&lt;/a&gt;를 &lt;code&gt;linux/&lt;/code&gt;의 서브 디렉토리에 압축을 해제한다. 예를들면 경로는 &lt;code&gt;/usr/share/lxr/source/2.6.22/linux/&lt;/code&gt; 이고 소스코드는 &lt;code&gt;linux/&lt;/code&gt;아래에 위치한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/share/lxr/source/2.6.32
$ sudo tar zxvf linux-2.6.32.tar.gz&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iv) &lt;code&gt;/usr/share/lxr/source/versions&lt;/code&gt; 파일을 편집하여 &lt;code&gt;2.6.32&lt;/code&gt;를 입력한다. 입력해야할 버전이 여러개라면 라인 단위로 구분하여 입력한다.&lt;/p&gt;

&lt;p&gt;v) defversion라는 이름의 소프트링크를 만든다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ln -s /usr/share/lxr/source/2.6.32 /usr/share/lxr/source/defversion&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vi) &lt;code&gt;/usr/share/lxr/source/2.6.32/&lt;/code&gt;로 이동한 다음 &lt;code&gt;genxref linux&lt;/code&gt;명령을 실행한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd/usr/share/lxr/source/2.6.32/linux
$ sudo genxref&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vii) &lt;code&gt;/usr/share/lxr/source/2.6.32/&lt;/code&gt; 디렉토리에 읽기 권한을 설정한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chmod -R o+r /usr/share/lxr/source/2.6.32/*&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>gitweb 설치</title>
   <link href="http://ygpark.github.com/Git/2012/08/28/gitweb-for-ubuntu"/>
   <updated>2012-08-28T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Git/2012/08/28/gitweb-for-ubuntu</id>
   <content type="html">&lt;p&gt;이 문서는 Git 사용자에게 꼭 필요한 필수 유틸리티인 gitweb의 설치에 대해서 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='/images/gitweb/gitweb.png' /&gt;&lt;/p&gt;

&lt;p&gt;그림 1. kernel.org 사이트의 gitweb&lt;/p&gt;

&lt;h3 id='gitweb_'&gt;gitweb 설치&lt;/h3&gt;

&lt;p&gt;이렇게 입력하면 웹으로 gitweb에 접근할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install apache2 git-core gitweb

$ cd /var/www/
$ mkdir gitweb
$ cd gitweb
$ ln -s /usr/share/gitweb/* .&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='_'&gt;프로젝트 설정&lt;/h3&gt;

&lt;p&gt;다음으로 gitweb에 프로젝트를 추가하는 방법이다.&lt;/p&gt;

&lt;p&gt;기본적인 사용법은 아래와 같고&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /var/cache/git
$ ln -s /path/to/repo1/.git repo1.git&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;다음과 같이 디렉토리를 만들어서 사용자/프로젝트별로 구분할 수도 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /var/cache/git
$ mkdir username
$ cd username

$ ln -s /path/to/repo2/.git repo2.git
$ ln -s /path/to/repo3/.git repo3.git&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id1522'&gt;참조&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://wiki.kldp.org/wiki.php/gitweb'&gt;http://wiki.kldp.org/wiki.php/gitweb&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://kldp.org/node/100726'&gt;http://kldp.org/node/100726&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Linux Kernel - 새 defconfig 만들기</title>
   <link href="http://ygpark.github.com/Linux Kernel Tip/2012/08/28/creating-new-linux-kernel-defconfig"/>
   <updated>2012-08-28T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux Kernel Tip/2012/08/28/creating-new-linux-kernel-defconfig</id>
   <content type="html">&lt;p&gt;초보 리눅스커널 개발자에게 유용한 팁입니다.&lt;/p&gt;

&lt;p&gt;우리는 커널 빌드할 때 &lt;strong&gt;make xxx_defconfig&lt;/strong&gt; 같은 명령을 입력합니다. 이 명령의 의미는 &amp;#8216;미리 만들어 놓은 &lt;strong&gt;.config&lt;/strong&gt; 파일을 사용하라&amp;#8217; 입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make xxx_defconfig
$ make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;내 커널소스도 이렇게 만들고 싶은데 어떻게 해야할까요? 먼저 커널소스의 루트디렉토리에서 지금 쓰고있는 &lt;strong&gt;.config&lt;/strong&gt;를 찾습니다. 그리고 그것을 &lt;strong&gt;arch/arm/configs/&lt;/strong&gt; 디렉토리에 복사합니다. 이게 다에요. 다음엔 그냥 &lt;strong&gt;make xxx_defconfig&lt;/strong&gt; 명령을 사용하기만 하면 됩니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp .config arch/arm/configs/xxx_defconfig
$ make xxx_defconfig&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 마음놓고 옵션들을 바꿀 수 있고 되돌릴 수도 있습니다. make distclean 같은 명령도 내릴 수 있죠. :D&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>gdb 매뉴얼 - core dump 사용하기</title>
   <link href="http://ygpark.github.com/Linux/2012/08/27/gdb-manual"/>
   <updated>2012-08-27T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux/2012/08/27/gdb-manual</id>
   <content type="html">&lt;p&gt;core dump란 충돌이 발생했던 순간의 memory를 저장한 파일을 말한다. gdb는 core dump 파일을 불러와서 디버깅을 하는 기능을 제공한다. 하지만 그전에 core dump가 저장될 수 있도록 하는 설정이 필요하다.&lt;/p&gt;

&lt;h2 id='id1520'&gt;준비작업&lt;/h2&gt;

&lt;p&gt;core dump가 저장될 수 있도록 하는 설정은 &lt;code&gt;ulimit&lt;/code&gt; 명령을 사용한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 20
file size               (blocks, -f) unlimited
pending signals                 (-i) 16382
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) unlimited
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ulimit -a&lt;/code&gt;의 출력을 보면, 기본적으로 core file size가 0으로 잡혀있는 것을 확인할 수 있다. 이 상태에서는 core dump 파일이 생성되지 않는다. 따라서 core file size를 설정해 주어야 한다. 여기서는 unlimited로 설정한다.&lt;/p&gt;

&lt;p&gt;설정은 &lt;code&gt;ulimit -c unlimited&lt;/code&gt; 명령으로 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ulimit -c unlimited

$ ulimit -a
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 20
file size               (blocks, -f) unlimited
pending signals                 (-i) 16382
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) unlimited
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 설정이 되었다면, 프로그램이 죽을 때 현재 디렉토리($PWD)에 core dump 파일이 생긴다.&lt;/p&gt;

&lt;h2 id='id1521'&gt;사용법&lt;/h2&gt;

&lt;p&gt;core dump를 이용한 디버깅 방법은 다음과 같다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gdb [프로그램명] [덤프파일명]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gdb는 실행직후 core dump 파일을 로드하여 종료 직전의 메모리 상태를 만든다. 이 때 bt(backtrace)같은 gdb의 명령어셋을 사용하여 디버깅을 시작한다.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Makefile 예제</title>
   <link href="http://ygpark.github.com/Linux/2012/08/24/makefile-example"/>
   <updated>2012-08-24T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux/2012/08/24/makefile-example</id>
   <content type="html">&lt;h2 id='1_application'&gt;예제1. Application&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;CXX=g++
CFLAGS=-c -Wall
LDFLAGS=
SOURCES=main.cpp
OBJECTS=$(SOURCES:.cpp=.o)
EXECUTABLE=a.out

all: $(SOURCES) $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $@

.cpp.o:
	$(CXX) $(CFLAGS) $&amp;lt; -o $@

clean:
	rm -f $(OBJECTS)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='2_application__c_cpp_'&gt;예제2. Application - C와 CPP 복합&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;CC=gcc
CXX=g++

CFLAGS=-c -Wall
LDFLAGS=-lpthread

SOURCES=main.cpp VoiceSound2.cpp
OBJECTS=$(SOURCES:.cpp=.o)

SOURCES_C=sound/mixer.c sound/player.c
OBJECTS_C=$(SOURCES_C:.c=.o)

EXECUTABLE=test

all: $(SOURCES) $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS) $(OBJECTS_C)
	$(CXX) $(LDFLAGS) $(OBJECTS) $(OBJECTS_C) -o $@

.cpp.o:
	$(CXX) $(CFLAGS) $&amp;lt; -o $@
	
.c.o:
	$(CC) $(CFLAGS) $&amp;lt; -o $@

clean:
	rm -f $(OBJECTS) $(OBJECTS_C)&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='3_static_library'&gt;예제3. static library&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;CC=g++
CFLAGS=-c -Wall
SOURCES=GPSReader.cpp
OBJECTS=$(SOURCES:.cpp=.o)
TARGET=libnd100s

all: $(SOURCES) $(TARGET)

$(TARGET): $(OBJECTS)
	ar cr $(TARGET).a $(OBJECTS)

.cpp.o:
	$(CC) $(CFLAGS) $&amp;lt; -o $@

clean:
	rm -f $(OBJECTS) $(TARGET).a&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Linux: CPU scaling governor</title>
   <link href="http://ygpark.github.com/Linux/2012/08/24/linux-cpu-scaling-governor"/>
   <updated>2012-08-24T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux/2012/08/24/linux-cpu-scaling-governor</id>
   <content type="html">&lt;h3 id='cpu_'&gt;CPU 정보&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cat /proc/cpuinfo&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='2__'&gt;2번째 코어 살리기&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;echo 1 &amp;gt; /sys/devices/system/cpu/cpu1/online 
grep &amp;quot;processor&amp;quot; /proc/cpuinfo&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>bash에서 검색하기</title>
   <link href="http://ygpark.github.com/Linux/2012/08/24/bash-find-xargs-grep"/>
   <updated>2012-08-24T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux/2012/08/24/bash-find-xargs-grep</id>
   <content type="html">&lt;p&gt;리눅스에서 일반적으로 파일을 찾을 때에는 find명령을, 텍스트를 걸러낼 때에는 grep명령을 사용합니다. 이 두 명령어는 없어서는 안될 중요한 명령입니다. 하지만 이 두 명령을 조합해서 쓴다면 더 막강한 힘을 발휘합니다. 바로 xargs으로 명령어들을 연결해주면 됩니다.&lt;/p&gt;

&lt;h3 id='find_xargs_grep_'&gt;find, xargs, grep의 조합&lt;/h3&gt;

&lt;p&gt;find, xargs, grep명령을 조합하여 사용방법입니다:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name &amp;lt;파일명&amp;gt; | xargs grep --color -n &amp;lt;검색어&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이것이 가능한 이유는 find의 결과로 나오는 목록을 xargs가 grep의 마지막 인자로 넣어주기 때문입니다.&lt;/p&gt;

&lt;p&gt;리눅스 커널을 개발하는 경우는 아래와 같은 스크립트로 소스코드를 검색하곤 합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
# grep-kernel.sh

find . -name &amp;quot;*.[chSs]&amp;quot; -o -name &amp;quot;*.cpp&amp;quot; -o -name &amp;quot;Makefile&amp;quot; -o -name &amp;quot;.config&amp;quot; | xargs grep --color -n $1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;혹은 이렇게 Kconfig를 검색하기도 하죠.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
# grep-kconfig.sh

find . -name Kconfig | xargs grep --color -n $1&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>alsa-lib-1.0.16 cross compile for arm</title>
   <link href="http://ygpark.github.com/Linux/2012/08/24/alsa-lib-1016-cross-compile-for-arm"/>
   <updated>2012-08-24T00:00:00+09:00</updated>
   <id>http://ygpark.github.com/Linux/2012/08/24/alsa-lib-1016-cross-compile-for-arm</id>
   <content type="html">&lt;h3 id='id1517'&gt;요약&lt;/h3&gt;

&lt;p&gt;기본적인 크로스컴파일 방법과 configure시 libpython이 없다는 에러가 발생했을 때 대처법입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ CC=arm-linux-gcc ./configure --target=arm-linux --host=i686-linux
$ make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;libpython이 없다는 에러가 나면 이렇게 하세요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ CC=arm-linux-gcc ./configure --target=arm-linux --host=i686-linux --disable-python
$ make&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id1518'&gt;경험담&lt;/h3&gt;

&lt;p&gt;alsa-lib를 컴파일할 일이 생겼습니다. 그런데 configure 에서 에러가 발생합니다.&lt;code&gt;cannot find -lpython2.6&lt;/code&gt; 뭐라는걸로 보아서 python 라이브러리가 필요한듯 하네요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ CC=arm-linux-gcc ./configure --target=arm-linux --host=i686-linux
...
...
...
/opt/arm/4.3.1-eabi-armv6/usr/bin-ccache/.........: cannot find -lpython2.6
collect2: ld returned 1 exit status
make[3]: *** [smixer-python.la] 오류 1
make[3]: Leaving directory `/home/ygpark/download/sound/alsa-lib-1.0.16/modules/mixer/simple&amp;#39;
make[2]: *** [all-recursive] 오류 1
make[2]: Leaving directory `/home/ygpark/download/sound/alsa-lib-1.0.16/modules/mixer&amp;#39;
make[1]: *** [all-recursive] 오류 1
make[1]: Leaving directory `/home/ygpark/download/sound/alsa-lib-1.0.16/modules&amp;#39;
make: *** [all-recursive] 오류 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;어떻게 해야 할까요? configure 실행중 외부 라이브러리 의존성에 관한 에러가 발생할 경우 &lt;code&gt;configure --help&lt;/code&gt; 명령으로 옵션을 찾아보면 해답을 찾을 수 있습니다. 여기서는 &amp;#8217;&amp;#8211;disable-python&amp;#8217;이란 옵션이 있네요.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./configure --help | grep python
  --disable-python        disable the python components
  --with-pythonlibs=ldflags
                          specify python libraries (-lpthread -lm -ldl
                          -lpython2.4)
  --with-pythonincludes=Cflags
                          specify python C header files
                          (-I/usr/include/python)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;configure에 &amp;#8217;&amp;#8211;disable-python&amp;#8217;옵션을 적용해서 다시 시도해 봅니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ CC=arm-linux-gcc ./configure --target=arm-linux --host=i686-linux --disable-python
$ make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;configure가 완료되었고, 컴파일도 성공했군요. 컴파일된 결과물은 &lt;code&gt;./src/.libs/&lt;/code&gt; 에 있습니다.&lt;/p&gt;

&lt;h3 id='id1519'&gt;참고&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://omappedia.org/wiki/ALSA_Setup#ALSA_library'&gt;http://omappedia.org/wiki/ALSA_Setup#ALSA_library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 
</feed>